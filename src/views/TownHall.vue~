<template>
	<div class="container">
		<div class="outside row">
			<div class="col-md-3">
				<h4>Trending</h4>
			</div>
			
			<div class="col-12 col-md-9">
				<form method="POST" @submit.prevent="postPosts">
					<textarea
						class="form-control"
						v-model="post"
						placeholder="Thoughts?"
						style="height:130px"
						@keyup="minCharRequired">
					</textarea>
					
					<div class="row mt-2">
						<div class="col-6">
							<span v-if="charLeft < 300">
								<span style="color:red">{{charLeft}}</span>
							</span>
							<span v-else>
								<span style="color:green">{{charLeft}}</span>
							</span>
						</div>
						<div class="col-6 d-flex justify-content-end">
							<button class="btn btn-primary">Post</button>
						</div>
					</div>
				</form>
			</div>
		</div>
	</div>
</template>

<script>
import axios from 'axios';
import {toast} from 'bulma-toast';

export default{
	name: 'TownHall',
	data(){
		return {
			post: '',
			errors: [],
			success: [],
			timeline: [],

			user_id: '',
			
			// Character count of the textarea
			charLeft: 0,
		}
	},
	mounted(){
		document.title = 'Town Hall | Wlog'
	},
	created(){
		this.user = localStorage.getItem('username')
		console.log(localStorage.getItem('accessToken'))
		console.log(localStorage.getItem('refreshToken'))
	},
	methods: {
		minCharRequired(){
			let left = this.post.length
			this.charLeft = left
			return this.charLeft
		},
	
		async postPosts(){
			this.errors = []
			this.success = []
			
			if(this.post === ''){
				this.errors.push('Post field can\'t be empty')
			}
			if(this.post.length < 300){
				this.errors.push('You need more than 300 characters!')
			}
			
			if(!this.errors.length){
				const postData = {
					post: this.post,
				}

				const token = localStorage.getItem('accessToken')
				//const cred = axios.defaults.headers.common['Authorization'] = 'Bearer ' + token

				await axios
					.post('/backdoor/api/posts/', postData, {
							'headers': `Bearer ${token}`
						})
					.then(response => {
						//axios.defaults.headers.common['Authorization'] = 'Bearer ' + token
						if(response.data){
							toast({
								message: 'Your post has been successfully posted',
								type: 'is-success',
								dismissable: true,
								duration: 2000,
								position: 'top-center',
								animate: {
									in: 'fadeIn', out: 'fadeOut'
								},
							})
						}
						
					})
					.catch(error => {
						if(error.response){
							console.log(error)
							for(const property in error.response.data){
								this.errors.push(`${property}: ${error.response.data[property]}`)
							}
							console.log(JSON.stringify(error))
						} else {
							this.errors.push('Something went wrong!')
							console.log(JSON.stringify(error))
						}
					})
			}
		}
	},
}
</script>

<style scoped>
.outside.row {
	padding: 100px 15px 50px 15px;
}
</style>
